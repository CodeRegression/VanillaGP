<?xml version="1.0" ?>

<class terminator="true">

<namespace>NVL_AI</namespace>
<solution>VanillaGPLib</solution>
<name>Population</name>
<description>Handler for a population of solutions</description>

<includes>
    <include name="vector" namespace="std" local="false"/>
    <include name="iostream" namespace="std" local="false" />
    <include name="opencv2/opencv.hpp" namespace="cv" local="false" />
    <include name="CodeDash.h" local="true" />
    <include name="EvalEngine/EvaluatorBase.h" local="true" />
    <include name="GrammarBase/SolutionFactoryBase.h" local="true" />
</includes>

<variables>
    <variable type="SolutionFactoryBase *" name="factory" code="10" />
    <variable type="CodeDash *" name="codeDash" code="10" />
    <variable type="vector<Solution *>" name="population" code="10" />
    <variable type="vector<Solution *>" name="bestSolutions" code="10" />
    <variable type="int" name="generation" code="11" />
    <variable type="int" name="sameScore" code="11" />
    <variable type="int" name="generationLimit" code="10" />
    <variable type="int" name="sameScoreLimit" code="10"/>
    <variable type="bool" name="solutionFound" code="10" />
</variables>

<constructors>

    <!-- Main Constructor -->
    <constructor type="custom" inline="false">
        <parameter type="SolutionFactoryBase *" name="factory" description="A factory for generating solutions" />
        <parameter type="CodeDash *" name="codeDash" description="A link to the CodeDash engine" />
        <parameter type="int" name="populationSize" description="The size that we want the population to be" />
        <parameter type="int" name="generationLimit" description="The maximum generations we want before termination" />
        <parameter type="int" name="sameScoreLimit" description="The number of times we can not have progress before we give up" />
        <parameter type="double" name="reuseRatio" description="The number of initial 'promising' solutions we can reuse" />
    </constructor>

</constructors>

<methods>

    <!-- Evaluate population -->
    <method section="Evaluate" access="public" return="void" name="Evaluate" description="Evaluate the population" inline="false">
        <parameter type="EvaluatorBase *" name="evaluator" description="Used to evaluate the solutions within the popluation" />
        <parameter type="int" name="retainCount" description="The number of good solutions to keep for the next generation" />
    </method>    

    <!-- Spawn Next Generation -->
    <method section="Next Generation" access="public" return="void" name="NextGeneration" description="Creates the next generation" inline="false">
        <parameter type="double" name="mutate" description="The percentage of elements to mutate" />
    </method>

    <!-- Is Complete? -->
    <method section="Terminate Check" access="public" return="bool" name="Terminate" description="Checks to see if we should terminate the process or not" inline="false" />

</methods>

<tests>
    <test name="generation_check" description="Confirms that the generation process worked as expected" exception="false" />
    <test name="best_evaluation_retention" description="Confirms that we are able to retain the best results" exception="false" />
    <test name="generation_terminate" description="Confirm generation termination" exception="false" />
    <test name="flat_line_terminate" description="Confirm flat line termination" exception="false" />
    <test name="solved_terminate" description="Confirm termination because solution found" exception="false" />
</tests> 

</class>